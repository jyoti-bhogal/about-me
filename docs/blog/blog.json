[
  {
    "path": "blog/2025-05-27_epcc_talk/",
    "title": "Hal√≤ Scotland! Visiting EPCC in the Edinburgh Sunshine",
    "description": "In this blog, I walk you through my visit to the EPCC, University of Edinburgh where I was invited for a talk for my work towards the RSE Asia Association!",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-05-29",
    "categories": [
      "Software Sustainability Institute",
      "University",
      "Talk",
      "Free and Open Source Software",
      "Software",
      "Research Software",
      "Open Science",
      "Open Source",
      "Meta data",
      "Edinburgh",
      "Scotland",
      "United Kingdom",
      "In Person"
    ],
    "contents": "\nAs part of my SSI Fellowship project, I was invited to visit EPCC at the University of Edinburgh and give a talk about my work. This was following my participation in the Collaborations Workshop 2025 organised by the Software Sustainability Institute (SSI) at the University of Stirling. I was joined by SSI Fellows Samantha Wittke and Saranjeet Kaur.\nImage: (Left to Right) SSI Fellows: Saranjeet Kaur, Jyoti Bhogal, Samantha Wittke at EPCC, Bayes Center, University of Edinburgh against the backdrop of the Holyrood Park (Salisbury Crags on the left, Arthur‚Äôs Seat on the right). Image credit: Catherine Inglis.On the day, Catherine Inglis and Neil Chue Hong welcomed us to the Bayes Centre at EPCC. The robots on the ground floor of the Bayes Centre are hard to miss, and I must say, I was captivated by them! We all went on a tour of the EPCC building and met several members of the team there. Later, we stepped out and had a lunch break in the beautiful and sunny campus of the University of Edinburgh. It was during the chats with Catherine and Neil, I got to know that the Unicorn ü¶Ñ - an imaginary creature - is the National Animal of Scotland, and then it made sense to me why the buildings in Edinburgh have so many unicorn statues!\nImage: (Left to Right) A robot at the Bayes Center, University of Edinburgh; The Unicron, the National Animal of ScotlandThere were two talks planned for the day. The first one was by Samantha, who shared about the CodeRefinery project and her work with the Nordic RSE. Later, I presented my talk on the ongoing ‚ÄòResearch Study on the Research Software Engineering (RSEng) Landscape in Asia‚Äô. Coincidentally, there were a few common points touched during both the talks - maybe CodeRefinery and RSE Asia could collaborate more closely in the future, but for now, I will focus this blog on my talk! üòä\nImage: Jyoti Bhogal speaking about her ‚ÄúResearch Study on the Research Software Engineering (RSEng) Landscape in Asia‚Äù at EPCC, Bayes Center, University of Edinburgh.What is RSE Asia?\nWe (I and my co-Founder Saranjeet Kaur) launched the Research Software Engineering Asia Association (RSE Asia) back in 2021, on the very first International RSE Day, as there was almost no awareness about Research Software Engineering in the Asian region. Over the past 3+ years we have conducted and participated in various events and workshops to raise awareness about the profession and the community. Based on the reflections over this period, I started to explore the RSE landscape in the Asian region to get better informed insights.\nWhat is my project about?\nThe motivation for this project was gained after reflecting over several of the community initiatives and interactions that RSE Asia had with the community in the region. I was further encouraged to take this work ahead when I proposed the idea during my talk on ‚ÄòWhat is Research Software and Why Should we Think About its Sustainability?‚Äô at the 58th meeting of the Asia Pacific Advanced Network (APAN58) during August 2024, which was attended by delegates from across Asia Pacific as well as the globe. I have been developing this idea since then, and have been encouraged and supported to do so by several RSE community members, SSI fellows, and community leaders.\nSpeaking of why this study is required - this study is essential for several reasons, some of which are the need to diversify and expand the research software landscape, attempt to address the lack of formal RSE roles in Asia, leverage international partnerships, and further build a supportive community within Asia.\nSSI has been conducting surveys to study the RSE landscape since 2018. However, there has been almost no representation of Asia in these surveys. This makes my research study even more essential.\nImage: RSEs in the world in 2018, originally shared in the blog What do we know about RSEs? Results from our international surveys.Within Asia, the Asia-Pacific Advanced Network (APAN) is an organisation that represents member institutions as well as it is a backbone network connecting member countries and regions to each other and to other international research and education networks. I am a member of APAN‚Äôs Open and Sharing Data Working Group (OSDWG). This working group engages in dialogue and activities to promote good open science practices within research roles/institutes in the Asia Pacific. RSE Asia has had a consistent voice and representation during the biannual APAN meetings as a part of this working group. Through these engagements we realised the common interests we share with the working group and their intentions to help support the objectives of RSE Asia. Asia being a very complex and diverse region both, culturally and economically, it is essential to have the support from an established working group like the APAN‚Äôs OSDWG so as to have a better understanding of the research software landscape in the region.\nImage: APAN Current Members (as of December 2024). Source of information for creating map: APAN website.So far in this project, I have been able to refine and adapt the existing SSI surveys to make them suitable for the Asian context. I have also launched a pilot survey with a small group in APAN‚Äôs OSDWG to gain first-hand feedback on the survey so far. Next, I plan to refine the survey further based on this feedback before launching the full survey to a larger group. If you are either a researcher based in Asia or have worked in the Asian region or collaborate with colleagues in Asia, then please watch the RSE Asia page for updates about my project and the survey - I would love to hear from you!\nüéâ Concluding the day\nAfter the talks, we spent some time discussing our work with the audience, which smoothly transitioned into EPCC‚Äôs ritual of ‚ÄòFriday Buns‚Äô. We discussed the challenges and way forward. Later that evening, I walked up the Calton hill (recommended by many) and got to see a 360¬∞ view of the city, the valleys, as well as the beautiful North Sea. Being a bright, sunny day, with the sun setting almost post 10 pm, I went for a walk to the Portobello Beach, and loved every bit of it!\nImage (Left to Right): Me against the backdrop of the National Monument of Scotland on the Calton Hill; The beautiful blues and browns of the Portobello Beach in Edinburgh.I sincerely want to thank Neil Chue Hong for inviting me to EPCC and to Catherine Inglis for all the hospitality she offered. Last but definitely not least, a big thanks to Sohail Sukhiani and Oscar Seip for offering me a lot of behind-the-scenes support. I immensely value this opportunity of personal and professional growth!\nüîë Resources:\nTalk slides: https://zenodo.org/records/15450346\nüì© Get In Touch:\nRSE Asia LinkedInRSE Asia emailRSE Asia website\nEmail: bhogaljyoti1@gmail.comLinkedIn: www.linkedin.com/in/jyoti-bhogalGitHub: https://github.com/jyoti-bhogalMastodon: https://mastodon.social/@jyoti_bhogalBluesky: https://bsky.app/profile/jyoti-bhogal.bsky.socialWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-05-27_epcc_talk/epcc_jyoti_talk_title_slide.jpeg",
    "last_modified": "2025-06-13T14:42:42+05:30",
    "input_file": {}
  },
  {
    "path": "blog/2025-05-25_cw25_hack_day/",
    "title": "`MetaGreenData`: Making Code More Sustainable, One Metadata File at a Time",
    "description": "Ever thought about how much energy your code consumes? Or how to make your software more eco-friendly? Well, during the recent Collaborations Workshop 2025 Hack Day, my team decided to tackle this very challenge. Let me walk you through my journey.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-05-25",
    "categories": [
      "Software Sustainability Institute",
      "Free and Open Source Software",
      "Software",
      "Python",
      "Django",
      "Research Software",
      "Open Science",
      "Open Source",
      "Meta data",
      "University",
      "Stirling",
      "Scotland",
      "United Kingdom",
      "In Person"
    ],
    "contents": "\nEver thought about how much energy your code consumes? Or how to make your software more eco-friendly? Well, during the recent Collaborations Workshop 2025 Hack Day, my team decided to tackle this very challenge. Let me walk you through our journey.\nImages (L to R): Jyoti Bhogal in the backdrop of the ‚ÄòUniversity of Stirling‚Äô and the centrally located Airthrey Loch; The William Wallace Monument, also known as the National Wallace Monument, located on the Abbey Craig in Stirling, Scotland.The third day of the Collaborations Workshop 2025 was a dedicated Hack Day. The attendees were invited to pitch ideas for the Hack Day. Many wonderful ideas were pitched for the same. People started joining the team with the idea in which they were most interested to work upon. Ultimately, 10 teams were formed. The 10 teams collaborated for an intense hack day, leading to amazing ideas taking shape by the end of the day!\nEarlier on the second day of the workshop I had attended a collaborative ideas discussion session on ‚ÄúMetaGreenData: standardised reporting of the environmental impact of compute‚Äù chaired by Kirsty Pringle and joined by Bryn Ubald, Caterina Doglioni, Connor Aird, Jyoti Bhogal, and Saranjeet Bhogal. This session motivated me to join the ‚ÄúGroup: D - Delphinium‚Äù team for the Hack Day (team members: Christina Bremer, Duncan Leggatt, Jyoti Bhogal, Lo√Øc Lannelongue, Will Haese-Hill; Joining remotely: Dylan Powell, Michael Sparks). I enjoyed collaborating with my team during the Hack Day - we divided the tasks amongst each other. Throughout the day the judges visited the different teams asking questions, and at the end of the day, we were asked to provide a presentation of the work we did. In this blog post, I share the product my team created by the end of the Hack Day!\nImage: Group photo while working on the hack idea, (L to R) Caterina Doglioni, Will Haese-Hill, Duncan Leggatt, Lo√Øc Lannelongue, Jyoti Bhogal, Christina Bremer; joining remotely: Dylan Powell, Michael Sparks.üöÄ Motivation\nWhile many developers are keen on optimising their code for speed and efficiency, not many consider the environmental impact. That‚Äôs where my team saw the opportunity. The idea was simple: create a tool that helps developers understand and reduce the carbon footprint of their software.\nüß† Brainstorming the Solution\nThe brainstorming session was filled with energy and ideas. The motive was to come up with a solution that was:\nUser-friendly: Easy for developers to integrate into their workflow.\nInformative: Provides clear insights into the environmental impact.\nActionable: Offers suggestions to reduce carbon emissions.\nAfter much discussion, it was decided to have a metadata generator that captures essential information about software, making it easier to assess and improve its sustainability.\nüõ†Ô∏è Building MetaGreenData\nEnter MetaGreenData. This is a Django-based web application designed to help developers generate metadata files for their software projects. Here‚Äôs how it was designed:\nUnderstanding the Standards: To begin with, existing metadata standards, like CodeMeta and the Citation File Format (CFF), were explored. These standards provide a structured way to describe software, making it easier to share and cite.\nDesigning the Workflow: Then a simple form was created where users can input details about their software. This included information like the software‚Äôs name, version, authors, and more.\nGenerating the Metadata: The tool was designed to generate a metadata file in the chosen format (CodeMeta or CFF) based on the input. This file can then be added to the software‚Äôs repository.\nIntegrating Carbon Footprint Estimation: Next, the Green Algorithms calculator was integrated to estimate the carbon footprint based on the software‚Äôs computational requirements.\nüîç Visualising the Process\nTo make things clearer, here‚Äôs a simple flowchart of how MetaGreenData works:\nSolution flow chart.üì¶ The Outcome\nMetaGreenData is now available on GitHub! üéâ\nThe idea was developed on a GitHub repository called MetaGreenData. We plan to develop it further and make it user-friendly.\nLast but definitely not the least this project won the first prize at the Collaborations Workshop 2025 Hack Day. Here‚Äôs my team‚Äôs picture from the day!\nImage credit: Software Sustainability Institute; (L to R) Christina Bremer, Will Haese-Hill, Duncan Leggatt, Lo√Øc Lannelongue, Jyoti Bhogal, Joining remotely: Dylan Powell, Michael Sparks.And here‚Äôs my certificate:\nCertificate of Achievement: First place at the Hack Day, Collaborations Workshop 2025, organised by the Software Sustainability Institute.üìö References and Inspirations\nThe project was inspired and informed by several resources:\nGreen Algorithms Calculator: Helps estimate the carbon footprint of computations.\nCodeMeta Generator: Assists in creating standardised metadata files.\nCitation File Format (CFF): Provides a human- and machine-readable format for software citation.\nDraft Metadata Fields: A comprehensive list of metadata fields for software tools.\nüî≠ Looking Ahead\nMetaGreenData is just the beginning. The vision is of a future where sustainability is a core consideration in software development. By making it easier to assess and reduce the environmental impact of code, the hope is to inspire developers to make greener choices.\nGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: jyoti-bhogalGitHub: jyoti-bhogalMastodon: jyoti_bhogal\nBluesky: jyoti-bhogal.bsky.social\nWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-05-25_cw25_hack_day/uni_stirling_preview.png",
    "last_modified": "2025-06-13T14:48:30+05:30",
    "input_file": {},
    "preview_width": 1448,
    "preview_height": 949
  },
  {
    "path": "blog/2025-04-29_generatervis_blog_2/",
    "title": "{generatervis}: An R package to synthesise, visualise clinical data, and create a workflow - Part 2",
    "description": "I have been developing an R package {generatervis} which is useful to synthesise and visualise clinical data, and create a data workflow. This is the second blog in this series of blogs to share about the process from ideation to implementation.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-05-05",
    "categories": [
      "FOSS",
      "Free and Open Source Software",
      "Software",
      "R",
      "Package",
      "Research Software",
      "Open Science",
      "Open Source",
      "Clincial Data",
      "Bioinformatics"
    ],
    "contents": "\nYellow Allamanda Cathartica flowers clicked by me.This is the second blog in the series of blogs about my first open-source R package {generatervis}. In this blog, I share how I convert the domain knowledge into a flowchart for developing an MVP of the package.\nüìù Figuring out what we really need\nOver the past several weeks, I have been discussing with my cohort fellows and our mentor Rowland Mosbergen. The domain of Whole Genome Sequencing (WGS) is very vast, and the first lesson we have learnt is to narrow down the problem space we are trying to solve and create a roadmap for what we want to implement. This gives us a structure for our Minimum Viable Product (MVP). Based on the requirements that we have gathered so far, I have created the following maturity model of a research data management workflow for creating and ingesting the WGS dataset into REDMANE.\nMaturity model to create and ingest data into REDMANE.üß† Creating a flowchart: How am I approaching this?\nAs a next step, I divided the different stages of the maturity model into further granular and achievable chunks. These steps help to create a basic workflow that starts with creating empty files in the .fastq format for the WGS dataset and eventually uploading the modified file(s) to the GitHub repository of a data portal, similar to the cBioportal, which is an open-source platform to explore and analyse large-scale cancer genomic datasets.\nüåº Bringing the mental model to life, step by step\nThe maturity is refined into a flowchart.When creating this flowchart, I made the assumption that there is only one sample per patient.\nOnce I created the flowchart, it became much easier for me to start implementing the steps into the functions of the package. With the goal of developing a functional MVP version of the package, I have written an R function in the R package {generatervis} for each of the above steps. Follow along the blog to see the usage of each of these functions!\n‚¨áÔ∏è Installing the package {generatervis}:\nThe development version of the {generatervis} R package can be installed from GitHub using:\n# install.packages(\"pak\")  \npak::pak(\"Clinical-Informatics-Collaborative/generatervis\")  \nOnce the package is installed, it can be used to perform the workflow steps as detailed below.\nFirst let‚Äôs create an empty .fastq file by specifying a patient ID (multiple patient IDs can be provided as a vector) using the create_empty_fastq() function.\nAs a demo let us consider the patient_id to be ‚Äùpatient_123‚Äù.\ngeneratervis::create_empty_fastq(patient_id)  \nEmpty FASTQ file created at: /var/folders/7k/kpyh33yd4mlbp_p2j8m4810m0000gn/T//RtmpLlrqm6/patient_123.fastq  \nNow let‚Äôs generate a random sample of n (say 2) reads, for ‚Äùpatient_123‚Äù using the rreads() function. Read length is the length of the sequence of nucleotides to be generated for each read. As an example, consider a .fastq file with read length 8.\nset.seed(1067)  \ngeneratervis::rreads(patient_id, n, read_length)  \n[1] \"@patient_123_read1\" \"ACACGGCG\"           \"+\"                  \"IIIIIIII\"            \n[5] \"@patient_123_read2\" \"CCATTTTT\"           \"+\"                  \"IIIIIIII\"   \nNext, we fill the empty .fastq file with the random sample of n reads, for ‚Äùpatient_123‚Äù, using the fill_fastq() function.\ngeneratervis::fill_fastq(patient_id, output_dir, n, read_length)  \nFile already exists. Appending reads to the existing file.  \nPopulated /var/folders/7k/kpyh33yd4mlbp_p2j8m4810m0000gn/T//RtmpLlrqm6/patient_123.fastq with 2 reads.  \nAt this stage, you can plot a heatmap of the sequences of the nucleotides using the fastq_plot() function. For the time being, I have hard-coded the sequences of nucleotides. As I develop the package further, I will modify this function so that it can be utilised.\ngeneratervis::fastq_plot(patient_id, output_dir, n, read_length)  \nPlot saved to: /var/folders/7k/kpyh33yd4mlbp_p2j8m4810m0000gn/T//RtmpLlrqm6/fastq_plot_patient_123.png  \nOnce the .fastq file is created, it needs to be processed to be converted into a .bam file. This can be done using the fastq_to_bam() function.\nreference <- \"chr1\"  \nfastq_file <- file.path(output_dir, paste0(patient_id, \".fastq\"))  \nsam_file <- paste0(output_dir, \"/\", patient_id, \".sam\")  \ngeneratervis::fill_fastq(patient_id, output_dir, n, read_length)  \ngeneratervis::fastq_to_bam(fastq_file, patient_id, output_dir, sam_file, reference)  \nDummy SAM file written to: /var/folders/7k/kpyh33yd4mlbp_p2j8m4810m0000gn/T//RtmpLlrqm6/patient_123.sam   \nThe .fastq is actually first converted into a .sam file, which you need to further convert into a .bam file, using the samtools command-line tool.\n# samtools view -Sb path_to/file_name.sam > path_to/file_name.bam  \nFollowing this conversion, the .bam file is summarised into a .vcf file using bam_to_vcf().\nvcf_file <- paste0(output_dir, \"/\", patient_id, \".vcf\")  \ngeneratervis::bam_to_vcf(patient_id, output_dir, vcf_file)  \nDummy .vcf written to /var/folders/7k/kpyh33yd4mlbp_p2j8m4810m0000gn/T//RtmpLlrqm6/patient_123.vcf  \nFinally we create the metadata .txt files using create_metadata().\ngeneratervis::create_metadata(patient_id, output_dir)  \nThese files can then be uploaded to a data storage portal. Inspired by the cBioportal/datahub repository, I have created the Clinical-Informatics-Collaborative/data_storage_portal repository for uploading the data.\nüéØ Next steps\nSome of the potential next steps include:\nImplement the workflow for real WGS dataset files.\nFor other dataset types, like Tabular Circular data, Imaging Dataset, etc., implement the process of creating the dataset and uploading it to cBioportal.\nP.S.: The project development is done using CI/CD. To know further, keep an eye on future blog posts in this series.\nüîë Resources created\n{generatervis} website: https://clinical-informatics-collaborative.github.io/generatervis/\ndata_storage_repo GitHub repository to store the data from the R package {generatervis}: https://github.com/Clinical-Informatics-Collaborative/data_storage_portal\nüí°References\nR Packages (2e) by Hadley Wickham and Jennifer Bryan, CC BY-NC-ND 4.0 License\nFor more reading about Bioconductor R packages for WGS data, see: https://www.bioconductor.org/packages/release/BiocViews.html#___Software\nGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: jyoti-bhogalGitHub: jyoti-bhogalMastodon: jyoti_bhogal\nBluesky: jyoti-bhogal.bsky.social\nWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-04-29_generatervis_blog_2/yellow_flowers.jpg",
    "last_modified": "2025-05-06T10:48:20+05:30",
    "input_file": {}
  },
  {
    "path": "blog/2025-04-17_generatervis_blog_1/",
    "title": "{generatervis}: An R package to synthesise and visualise clinical data - Part 1",
    "description": "I have been developing an R package {generatervis} which is useful to synthesise and visualise clinical data. This is the first blog in this series of blogs to share about the process from ideation to implementation.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-04-17",
    "categories": [
      "FOSS",
      "Free and Open Source Software",
      "Software",
      "R",
      "Package",
      "Research Software",
      "Open Science",
      "Open Source",
      "Clincial Data",
      "Bioinformatics"
    ],
    "contents": "\nIxora Red flowers clicked by meI have been developing an R package {generatervis} which is useful to synthesise and visualise clinical data. This is the first blog in this series of blogs to share about the process from ideation to implementation.\nüìà Research Data Management (RDM): How to handle and organise your research data?\nData management is the process of collecting, storing, organising, and using data in a structured manner to ensure accuracy, completeness, and security. It involves all aspects of managing data throughout its lifecycle, from creation to deletion or archiving. Essentially, it‚Äôs about making sure data is accessible, reliable, and used effectively to support operations and decision-making. Data management becomes really difficult to achieve in a scenario where the research data is spread across multiple organisations, is multi-omics (genomics, transcriptomics, proteomics, and metabolomics) in nature, and is being published through different journals. To add more complexity to this, there are different versions/stages of the data files (raw, processed, summarised) throughout the data lifecycle, and ingesting the data into the essential workflows becomes all the more complex.\nüõ†Ô∏è What‚Äôs the story behind REDMANE?\nREsearch Data Management and ANalysis Environment (REDMANE) is a data management and analysis platform that was introduced to resolve these complex issues.\nREDMANE resolves these issues by having the following features:\nLightweight and flexible ecosystem\nDoesn‚Äôt need organisational buy-in\nCheaper to run than full cloud solution\nEasily handles new data types\nFocused on importing information quickly and easily\nSingle Sign On\nCan handle cross-organisation data easily\n‚öôÔ∏è A quick look at REDMANE‚Äôs structure\nREDMANE structure with common patient and sample ideas across different types of datasetsüß¨ So, what exactly is Whole Genome Sequencing (WGS)?\nWhole Genome Sequencing (WGS) data refers to the complete DNA sequence of an organism, including both coding and non-coding regions. It‚Äôs a comprehensive analysis of an organism‚Äôs genome, providing a detailed view of its genetic makeup. WGS is a powerful tool for genomics research, allowing scientists to identify genetic variations, study disease outbreaks, and more.\nSome of the use cases for WGS data are:\nMedical Genomics: Diagnosing rare diseases, identifying cancer drivers, and personalised medicine.\nEvolutionary Biology: Understanding species relationships and the evolution of life.\nAgriculture: Improving crop and livestock breeding programs.\nPublic Health: Tracking disease outbreaks and developing new diagnostics.\nWGS data in this R package is synthesised, instead of using real-world data so as to ensure that patient privacy is maintained and any potential security concerns are addressed while still making the data useful for research. As an example, sensitive data such as: medicare number, date of birth, location of residence, etc, are often included in clinical data. Therefore, the solution is to artificially or ‚Äòsynthetically‚Äô generate clinical data that replicates real-world datasets.\nüåº What does a WGS dataset really look like? Here‚Äôs a snapshot.\nWGS dataset concept diagramüîé Curious how the WGS dataset ties into REDMANE? Let‚Äôs walk through it.\nREDMANE contains different types of datasets for the sample patient ID and the sample ID. One of these dataset types is WGS data. In this blog series, we will explore the process of file creation, dataset creation, and workflow creation for the WGS dataset.\nMaturity model to create and ingest data into REDMANEThe above diagram shows a maturity model for creating WGS data files and uploading them to the cBioportal. cBioportal is a widely used free, open-source online database useful to explore, analyse and visualise cancer genomics data.\nüõ†Ô∏è Here‚Äôs a quick guide to creating WGS data files\nStep 1: Create empty files with the correct file names for the workflow.\nStep 2: Add minimal sample data to the empty files.\nStep 3: Add more sample data to the minimal files.\nüéØ Next steps\nSome of the potential next steps include\nTo create the workflow for WGS dataset files.\nThe 4th step in the maturity model, i.e., uploading the WGS dataset into cBioportal.\nFor other dataset types, like Tabular Circular data, Imaging Dataset, etc., implementing the process of creating the dataset and then uploading it to cBioportal.\nTo visualise for WGS datasets.\nP.S.: The project development is done using CI/CD. To know further, keep an eye on future blog posts in this series.\nüîë Resources created\nA website to give a brief introduction and demo of the R package {gereratervis} is: https://clinical-informatics-collaborative.github.io/generatervis/\nThe work-in-progress source code for the R package is available at: https://github.com/Clinical-Informatics-Collaborative/generatervis\nüí°References\nR Packages (2e) by Hadley Wickham and Jennifer Bryan, CC BY-NC-ND 4.0 License\nR package {Shinylive}\nGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: jyoti-bhogalGitHub: jyoti-bhogalMastodon: jyoti_bhogal\nBluesky: jyoti-bhogal.bsky.social\nWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-04-17_generatervis_blog_1/preview_red_flowers.jpg",
    "last_modified": "2025-04-22T02:28:11+05:30",
    "input_file": {}
  },
  {
    "path": "blog/2025-03-30_apan58_apan59_blog/",
    "title": "Research, Software, and Collaborations",
    "description": "During my talks at the APAN58 and APAN59 meetings, I had a chance to have interesting conversations and feedback, which I am sharing through this blog.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-04-10",
    "categories": [
      "Research Software",
      "Conference",
      "Talk",
      "APAN",
      "Open Science",
      "Open Source",
      "Online",
      "Remote"
    ],
    "contents": "\nMount Fuji, Japan. Photo by David Edelstein on UnsplashWhat is the Asia-Pacific Advanced Network (APAN)?\nAPAN is the international partnership of the National Research and Education Networks (NRENs) across the Asia Pacific region. It spans over half of the world‚Äôs population, and its members are fundamental in the provision of high-speed network connectivity domestically and globally.\nAPAN has a number of working groups, one of which is the Open and Sharing Data Working Group (OSDWG). I became a member of this working group based on the common interest around developing the research software community and its importance in the research ecosystem.\nAPAN organises biannual meetings bringing together its members and other interested participants to review progress, demonstrate advances in technology and applications, and make plans for the future activities in the Asia Pacific. Over the past months, I got the chance to attend APAN58 and APAN59 meetings, online remotely and exchange knowledge with its stakeholders. In this blog, I am capturing my experiences of attending these meetings.\nAPAN58 Presentation ImageSource: APAN58 : Asia Pacific Open and Sharing Data WG, 27th August 2024, Part 1\nDuring the APAN58 meeting (August 2024), I had the opportunity to present my talk titled ‚ÄòWhat is Research Software and Why Should we Think About its Sustainability?‚Äô as part of the Open and Sharing Data Working Group (OSDWG) discussion session. Through my talk, I highlighted the importance of Research Software in the research ecosystem, explaining why it is necessary to think about its sustainability. I shared methods, tools, and best practices that can be utilised to improve the sustainability of research software, following up with the need and the benefits to include techniques for reproducibility in Research Software. Furthermore, I shared what software tools can be used to create, maintain, and share research software (Zenodo, GitHub, GitLab). I spoke about the different types of licenses that can be attached to the outputs of the research. This was followed by a summary of the journey of the Research Software Engineering (RSE) Asia Association, which I co-founded and co-lead since its launch in 2021.\nüîë Talk Resources:\nSlides: Jyoti Bhogal. (2024, August 27). What is Research Software and Why Should we Think About its Sustainability?. Zenodo.https://doi.org/10.5281/zenodo.13377699\nRecording: APAN58 : Asia Pacific Open and Sharing Data WG, 27th August 2024, Part 1 (Clip from 00:00 to 14:55)\n\nAs I spoke about research software, its definition, the tools to write and maintain it, the audience became curious to know more about research software and the community around it. For the OSDWG session, which focused on topics like Open Science and how research software complements it, my presentation actually gave a keynote kind of a head start to the rest of the talks being presented in the session of OSDWG.\nSource: APAN58 : Asia Pacific Open and Sharing Data WG, 27th August 2024, Part 1\nTowards the end of my talk, I asked the audience to share their feedback to the questions ‚ÄòWhat do you think about research software engineering as a role and as a career path?‚Äô and ‚ÄòWhat are your thoughts on how open science might help the researchers worldwide?‚Äô and received some interesting responses:\n\n‚ÄúLooks interesting, since I have heard about it for the very first time in this talk at APAN58 meeting.‚Äù\n\n\n‚ÄúIt is necessary for research software engineering management. I‚Äôve heard that the organisations usually do not have enough capacity for managing research software engineers. However, they need software consistently. So, the public sectors help with this.‚Äù\n\n\n‚ÄúIt‚Äôs an innovative way to share research, data and publications, etc.‚Äù\n\n\n‚ÄúSo many students in the world have a very different situation in their social and life environment. For them, the internet and open science involving open access, open data, open software, and so on will help provide an education and research environment for equality.‚Äù\n\nIt was nice to see that my talk sparked curiosity in the audience and they promptly provided their feedback of what resonated with them. I also attended sessions on various topics including cybersecurity, high-performance computing & AI, agriculture and rural hybridization, network technologies, telemedicine and research collaborations. These sessions gave me more insights into the latest proceedings in the various fields of research and development in the Asia Pacific region.\nIn March 2025, I had the opportunity to speak at the Asia Pacific Advanced Network‚Äôs APAN59 meeting online remotely. My presentation was on the title ‚ÄòBuilding Bridges: Advancing Research Software Engineering and Open Science in Asia‚Äô. I gave my talk as part of the APAN‚Äôs Open and Sharing Data Working Group (OSDWG). Software being one of the pillars of Open Science, through this talk, I highlighted how paying attention towards developing and maintaining research software is directly linked to the principles of Open Science.\nLater in March 2025, I had the opportunity to present my talk titled ‚ÄòBuilding Bridges: Advancing Research Software Engineering and Open Science in Asia‚Äô at APAN59, online remotely again as part of the OSDWG discussion session. Software being one of the pillars of Open Science, through this talk, I highlighted how paying attention towards developing and maintaining research software is directly linked to the principles of Open Science.\nDuring my talk, I shared about my ongoing Research Study on the Research Software Engineering (RSEng) Landscape in Asia. I discussed the need of this study - due to the no/low representation of the community of researchers who code in the Asian region. This is demonstrated by the outcomes of an existing global survey by the Software Sustainability Institute, which completely lacks representation from Asia.\nSSI Survey Summary TableSource: Article by SSI: What do we know about RSEs? Results from our international surveys.\nSSI Survey MapSource: Article by SSI: What do we know about RSEs? Results from our international surveys.\nI shared the roadmap of my research study with the audience. At the end of my talk, there were quite a few engaging questions. One of the comments from an active member of the APAN biannual meetings was\n\n‚ÄúThe topic of this research study is something that deals with a national-level problem, thus making it much more essential to be studied.‚Äù\n\nThe appreciative feedback encourages me to keep taking my research work further.\nüîë Talk Resources:\nBhogal, J. (2025, March 3). Building Bridges: Advancing Research Software Engineering and Open Science in Asia. Zenodo. https://doi.org/10.5281/zenodo.15180196\nGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: jyoti-bhogalGitHub: jyoti-bhogalMastodon: jyoti_bhogal\nBluesky: jyoti-bhogal.bsky.social\nWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-03-30_apan58_apan59_blog/david-edelstein-N4DbvTUDikw-unsplash.jpg",
    "last_modified": "2025-06-13T14:39:00+05:30",
    "input_file": {}
  },
  {
    "path": "blog/2025-04-05_fossasia_summit_2025/",
    "title": "FOSSASIA Summit 2025",
    "description": "During my visit to the FOSSASIA Summit 2025, I had a chance to have interesting conversations and learnings. I  am sharing the same through this blog.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2025-04-10",
    "categories": [
      "FOSS",
      "Free and Open Source Software",
      "Software",
      "Conference",
      "Talk",
      "Research Software",
      "Open Science",
      "Open Source",
      "Bangkok",
      "Thailand",
      "In Person"
    ],
    "contents": "\nWat Arun Ratchawararam Ratchawaramahawihan (Wat Arun temple), Bangkok, Thailand.Swa-dee-kah Bangkok! üëãüôè\nüßë‚Äçüíª What is FOSS?\nFOSS, an acronym for Free and Open Source Software, embodies a software development philosophy centered on freedom and openness. The term ‚ÄòFree‚Äô denotes users‚Äô liberty to run, alter, and share the software, while ‚ÄòOpen Source‚Äô signifies that the software‚Äôs source code is available for users to inspect, modify, and contribute to its progress. FOSS promotes collaboration, transparency, and user empowerment. This frequently leads to the creation of more secure and sustainable software projects. Notable examples of FOSS include Linux, Blender, Chromium, Kubernetes, and Mozilla Firefox, among many more.\nüßë‚Äçüíªüåè What is FOSSASIA?\nFOSSASIA is an organisation developing Open Source software applications and Open Hardware together with a global community from its base in Asia. Their goal is to provide access to open technologies, science applications and knowledge that improve people‚Äôs lives. They enable people to adapt and change technology according to their own ideas and needs, and validate science and knowledge through an Open Access approach. It was established in 2009 by Hong Phuc Dang and Mario Behling. They organise and participate in conferences, meetups and code camps. The annual FOSSASIA Summit is one of the top tech events in Asia. FOSSASIA also runs a number of coding programs, such as Codeheat.\nThe 15th edition of FOSSASIA Summit was organised at True Digital Park, Bangkok, Thailand from 13th to 15th March 2025. It brought together individuals sharing talks on topics around Free and Open Source Software. The Summit had multiple parallel track sessions like talks, lightning talks, workshops, and more! There were booths by various organisations creating and/or using Free and Open Source Software. This was my first experience of attending FOSSASIA in-person in Thailand.\nüóìÔ∏è Day 1\nThe day started with a lot of fervour. Following the welcome session by Hong Phuc Dang, there were multiple parallel tracks of talks. One of the booths demonstrated Robot Jupiter (image below) - an interactive virtual education assistant!\nRobot Jupiter, virtual education assistantI had a chance to speak to Nancy Reyes, a representative from the A11y Accessibility Labs. She was showcasing the hardware items that they use for digital accessibility awareness training during their Usability and Accessibility Clinic sessions.\nHardware items for digital accessibility awareness trainingA picture with Nancy Reyes, from the A11y Accessibility Labs, speaking about the mission of the RSE Asia Association.\nüóìÔ∏è Day 2\nMe against the backdrop of the live LED screens at the conference venue True Digital Park.The second day of the summit, 14th March, was themed as PGDay 2025, a 1-day event focused on the PostgreSQL database, which was held in conjunction with the FOSSASIA Summit. I learnt about a new tool - pgroll. It is an open-source command-line tool designed for PostgreSQL, ensuring that schema updates are applied safely, without locking the database, and enabling multiple schema versions to coexist. This ensures uninterrupted operation for client applications during migration, even when introducing breaking changes. The tool‚Äôs capability to automatically backfill columns and support instant rollbacks further enhances its reliability.\nLater that day, I came across the booth of Grafana Labs. As I spoke to Richard Hartmann, he shared about the useful features of Grafana Labs tools for creating reports, metrics, and graphs about the code being written.\nüóìÔ∏è Day 3\nI held a ‚ÄòMeet & Greet Spot‚Äô to speak to people about the field of Research Software Engineering, and discussed how it is a career path where one can combine their interest in implementing their research skills along with programming skills. I also shared about the past and the upcoming activities of the Research Software Engineering (RSE) Asia Association. Most people were curious to learn more about it, and also expressed a desire to join the future events held for the community.\nAt the conference venue entrance doorüë• Cultural Warmth\nFrom the moment I arrived at the Suvarnabhumi airport, I found everyone to be warm and welcoming. People at help desks, metro ticket counters, and even local markets were kind and helped me get around the city easily. I also learned something new about Thailand ‚Äî it‚Äôs a pedestrian-first country, where vehicles stop to let people cross the road. Another thing I noticed was a good gender balance in the different workplaces that I came across.\nDepiction of Samudra Manthan (The Churning of the Ocean Milk), Suvarnabhumi AirportWith fresh fruits like mangoes, jackfruits, bananas, guavas, cashews, and coconuts, I truly experienced the tropical feel of the country. I enjoyed trying different types of bread, like red bean and almond bread. I also got to taste authentic Pad Thai noodles and Veg Thai Curry at a restaurant in True Digital Park. A fellow participant at the conference even taught me how to use chopsticks practically. I found Bangkok‚Äôs infrastructure very supportive for growth, with great workspaces and plenty of learning resources to help you make your own impact. Everyone I met ‚Äî from the conference team to the hotel staff ‚Äî was friendly and helpful, making the city feel not just a hub to flourish businesses and communities, but a place that warmly welcomes you again and again.\nHere‚Äôs a glimpse of Bangkok through my eyes!\nPad Thai noodles and vegetarian Thai curry at the Ginger Farm restaurant, True Digital ParkThe Great Bodhi Tree at the Wat Arun Ratchawararam Ratchawaramahawihan (Wat Arun temple), Bangkok, ThailandNight view of the Wat Arun Ratchawararam Ratchawaramahawihan (Wat Arun temple), Bangkok, ThailandWat Pho, also known as the Temple of the Reclining BuddhaWat Pho, also known as the Temple of the Reclining Buddhaüìï My takeaway ‚Ä¶\nFOSSASIA Summit 2025 was especially close to my heart because it rekindled in me the spirit, zeal, and dedication towards contributing back to the software that we, knowingly or unknowingly, use on a day-to-day basis. As I left Thailand to return home, I carried so many learnings with me - especially the power that the voice of a community has!\nWith that, I am concluding this blog until next time ‚Ä¶\nWat Pho, also known as the Temple of the Reclining BuddhaGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: jyoti-bhogalGitHub: jyoti-bhogalMastodon: jyoti_bhogal\nBluesky: jyoti-bhogal.bsky.social\nWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2025-04-05_fossasia_summit_2025/preview_wat_arun.jpg",
    "last_modified": "2025-06-13T14:39:59+05:30",
    "input_file": {}
  },
  {
    "path": "blog/2025-02-20_jb_eostrc_s1_e5/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 5 - Testing Research Code",
    "description": "This is a blog sharing insights from Episode 5 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Saranjeet Kaur Bhogal, Abhishek Dasgupta, Sheena O‚ÄôConnell, Mireille Grobbelaar, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-03-20",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Software Testing",
      "Online",
      "Remote"
    ],
    "contents": "\nThis blog was originally posted on RSE Asia Blog page.\nEpisode 5 bannerIntroduction\nIn the world of research software development, ensuring that code runs correctly and produces reliable results is crucial. However, software testing is often overlooked, particularly in academic settings where researchers may lack formal training in programming best practices. This challenge was a central theme in the recent discussion during episode 5 of our six-part series ‚ÄúEnabling Open Science Through Research Code‚Äù, where experts from diverse backgrounds shared their experiences and insights on making software testing accessible and effective.\nDuring the session, panellists emphasised that while research software development is often self-taught, adopting best practices such as software testing can improve both individual efficiency and collaboration. One of the mantras that continuously came up in the different episodes is that\n\nWe should be our own best collaborators first.\n\nEpisode 5 once again showed how good coding practices can benefit the coder as much as other contributors, collaborators, and users. This post summarises the discussion, highlighting practical tips for beginners and more advanced strategies for experienced developers.\nOur wonderful speakers included:\nAbhishek Dasgupta, Senior Research Software Engineer at Oxford Research Software Engineering group, University of Oxford, UK\nSaranjeet Kaur Bhogal, Research Software Engineer at Imperial College London, UK and co-founder of the RSE Asia Association\nSheena O‚ÄôConnell, Software developer, founder and trainer at Prelude, South Africa\nTips, Tools, and Practices for Novices\nIf you‚Äôre new to coding or research software development, software testing may seem like an advanced topic. However, as our panellists suggest, starting with simple practices can make a big difference in the reliability of your code.\n1. Start with Assertions\nAssertions are a lightweight way to check that your code behaves as expected. Sheena shared an example from her experience, explaining how beginners often overlook errors that could easily be caught by using assert statements in Python.\nAssertions act as built-in sanity checks and can help catch errors early before they lead to misleading research results.\n2. Use Smoke Testing\nSimply running your code from start to finish to ensure it doesn‚Äôt crash is an easy way to catch obvious issues. Sheena described this as a useful technique for those who may not yet have structured testing frameworks in place.\nAutomated tools like nbval can help validate Jupyter Notebooks by checking that expected outputs remain consistent, an approach that Abhishek recommended.\n3. Learn Basic Unit Testing\nUnit tests check individual functions or small sections of code. Abhishek stressed that even a simple test like assert 2 + 3 == 5 is a great first step.\nIn Python, pytest is a lightweight and easy-to-use testing framework, whereas in R, testthat provides a simple way to implement tests within research code.\n4. Keep Code Modular\nWriting functions instead of long scripts makes it easier to test individual components. As Sheena pointed out, ‚ÄúUntested code is brittle.‚Äù Structuring code into reusable functions makes adding tests more straightforward.\n5. Automate Where Possible\nUsing GitHub Actions or other Continuous Integration (CI) tools can automate testing whenever you update your code. Abhishek mentioned that CI is a great way to ensure code works across multiple platforms, which is particularly helpful when collaborating with researchers using different operating systems.\nFor R users, the {usethis} package simplifies the workflow setup, automating repetitive tasks (for both R packages as well as non-package projects), as suggested by Saranjeet. She also recommended using the {fusen} package for anyone new to R package development (and also for experienced developers while they are prototyping functions) as it involves writing the function as well as its documentation and unit tests in the same file, avoiding the risk of forgetting crucial steps.\nImage Credits:Torsten Zelger\nApproaches to Software Testing for Experienced Developers\nFor those already familiar with software development, a more structured approach to testing can improve reproducibility and collaboration. The panellists discussed key strategies for advanced users, including:\n1. Different Types of Testing\nUnit Testing: Ensures small, isolated parts of the code work as expected.\nIntegration Testing: Checks if different parts of the system function correctly together. Abhishek highlighted the importance of this, noting that end-to-end validation is often overlooked in research projects.\nRegression Testing: Ensures new changes don‚Äôt break existing functionality, an approach Sheena described as essential for long-term code maintenance.\nProperty-Based Testing: Uses tools like hypothesis in Python to test code with a range of inputs, uncovering unexpected behaviours. Abhishek noted this as particularly useful for numerical research software.\n2. Version Control and CI/CD\nGit and GitHub/GitLab: Version control helps track changes, making it easier to debug issues. Sheena emphasised that ‚Äúresearchers who don‚Äôt use version control end up with folders full of files like final_version_revised_final_final.py, which is a nightmare to maintain.‚Äù\nContinuous Integration (CI): Running tests automatically on GitHub ensures all code changes are validated before being merged. Abhishek explained that setting up CI allows researchers to avoid relying on manual testing across different machines.\n3. Cross-Platform Testing\nResearchers often work across different operating systems. Automating tests in cloud environments ensures compatibility with Windows, macOS, and Linux.\nTools like tox or nox (Python) allow testing across multiple versions of a language. Abhishek highlighted that CI workflows, once set up, eliminate the need to manually ask colleagues to test code on different platforms.\n4. Automating Data Validations\nData quality is critical in research. Sheena introduced pandera in Python, a tool that helps verify data integrity and data schemas before analysis.\nStatistical validation using libraries like scipy.stats can confirm that distributions match expected properties, an approach recommended for data-intensive projects.\n5. Balancing Testing with Research Deadlines\nWriting tests may seem like extra work, but it prevents time-consuming debugging later. Abhishek acknowledged that ‚Äúgetting 100% test coverage is impractical for most research projects, but basic integration tests should be a minimum.‚Äù\nUsing automated tools like R‚Äôs targets package helps manage computational workflows efficiently, only re-running necessary parts of the code. Saranjeet recommended this as a time-saving approach for researchers handling large datasets.\nConclusion\nSoftware testing is not just for professional developers‚Äîit is an essential practice for research reproducibility and collaboration. While beginners can start with simple assertions and unit tests, advanced users can implement continuous integration, property-based testing, and automated data validation to ensure code reliability.\nAs Anelda concluded,\n\nTesting is not just about making research more open; it‚Äôs about being your own best collaborator.\n\nBy integrating these testing strategies into research software development, we can move toward a more open, transparent, and reliable scientific ecosystem.\nüì¢ Explore More:\nAccess our Resource Sheet, which contains numerous valuable resources shared by the panellists, facilitators, and participants.\nView the session recording on YouTube.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúResearch Software Funding‚Äù will take place on March 20, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nThis series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2025-02-20_jb_eostrc_s1_e5/banner_episode_5.png",
    "last_modified": "2025-06-13T14:38:29+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2025-02-18_jb_eostrc_s1_e4/",
    "title": "Enabling Open Science through Research Code: Insights from Episode 4 - Documentation for Research Code",
    "description": "This is a blog sharing insights from Episode 4 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-02-20",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Online",
      "Remote"
    ],
    "contents": "\nThis blog was originally posted on RSE Asia Blog page.\nEpisode 4 bannerImagine you‚Äôve spent months crafting a complex research software tool, refining algorithms, and running countless simulations. It works brilliantly‚Äîbut then, six months later, you revisit the code and‚Ä¶ you‚Äôre lost. Sounds familiar? You‚Äôre not alone. Experts shared their experiences and strategies for writing good documentation in the fourth episode of the Research Software Community Conversations Series titled Enabling Open Science through Research Code. Here‚Äôs what we learned from our participants and insightful panellists:\nJenny Wong - Product Manager @ 2i2c (UK/US)\nJoel Nitta - Associate Professor @ Chiba University (Japan)\nMthetho Sovara - Centre for High-Performance Computing (CHPC), National Integrated Cyberinfrastructure System (NICIS) CSIR (South Africa)\nüìå Why Documentation is Essential\nüöÄ Boosts Reproducibility: Research software often accompanies papers, but results can be difficult to replicate without documentation. As Jenny pointed out, in fluid dynamics research, well-documented simulation codes gained more adoption than poorly documented alternatives.\nü§ù Facilitates Collaboration: Well-documented projects attract more contributors and streamline knowledge transfer. Joel shared his experience in the rOpenSci community, where clear documentation allowed him to take over and improve an existing R package without needing direct input from the original creator.\n‚è≥ Enhances Longevity: Code without documentation quickly becomes unusable‚Äîeven by its original authors! Mthetho described how well-documented software in weather forecasting led to unexpected collaborations with the South African Weather Service and Ethiopian researchers.\nüîì Promotes Open Science: Accessible research software fosters innovation and inclusion worldwide. Jenny emphasised that accessible documentation enables wider adoption of tools, making scientific computing more democratic.\nüî• Common Challenges & Solutions\n‚è∞ Time Constraints ‚Üí Write minimal but clear documentation as you code. Joel suggested that legible code, such as meaningful variable names instead of ‚Äúx‚Äù or ‚Äúdat‚Äù, is itself a form of documentation that is even better than comments.\nüß© Lack of Standardisation ‚Üí Use templates and structured frameworks. Mthetho mentioned that clear, structured guides helped non-computational scientists successfully use OpenFOAM in unexpected fields like environmental science.\nüéØ Technical vs.¬†User Documentation ‚Üí Engage users in documentation efforts for clarity. Jenny highlighted the role of community-driven documentation efforts, such as hackathons, to improve usability.\nüõ† Best Practices for Better Documentation\n‚úçÔ∏è 1. Write as You Code\nWaiting until the end leads to missing details. Add inline comments and README files while developing. Joel emphasised that tools like RMarkdown (and its successor, Quarto) can be used for literate programming‚Äîthereby ensuring that the results of code are automatically generated alongside their description.\nüîÑ 2. Differentiate Documentation Types\n‚úî User-facing documentation: How to install, use, and troubleshoot.\n‚úî Developer-facing documentation: Comments, API references, contribution guides.\nüìö 3. Use the Right Tools\nüìÑ Markdown & Jupyter Notebooks ‚Äì Combine narrative and code.\nüìù Quarto & R Markdown ‚Äì For structured research outputs.\nüìò Sphinx & MIST ‚Äì Python-based documentation frameworks.\nüåê GitHub Wikis & Pages ‚Äì Host documentation openly.\nü§ñ AI-based tools (e.g., Cursor, Copilot) ‚Äì Assist with documentation (but always review!).\nü§ù 4. Community & Collaboration Matter\nüí° Participate in documentation hackathons. Jenny shared how Project Pythia‚Äôs hackathons provided a structured way to improve documentation in geospatial science. üåç Join communities like Project Pythia, The Carpentries, and Write the Docs.\nüí∞ 5. Advocate for Funding & Policy Support\nüì¢ Push for documentation funding in grant proposals.\nüèõ Engage with funders to integrate documentation into open science policies.\nüöÄ Future of Documentation: AI & Automation\nü§ñ Automated Documentation: AI tools generate initial drafts, saving researchers time. However, while helpful, AI-assisted documentation should always be reviewed for accuracy.\nüåç AI for Translation: Helps make documentation accessible in multiple languages, fostering global inclusivity. Anelda highlighted how AI tools might support research documentation in multilingual communities in the future. For now, we still need a human-in-the-loop translator for translation efforts. Especially for low-resourced languages.\n‚ö†Ô∏è Caution Needed: AI-generated content must be reviewed for accuracy and ethical considerations. Jenny raised concerns about biases in AI and the environmental impact of large-scale machine learning models.\nüéØ Final Thoughts: Make Documentation a Priority\nGreat research code deserves great documentation. It makes work reproducible, fosters collaboration, and ensures that software remains usable long after its creator has moved on. By embracing best practices and community support, we can all contribute to a culture where documentation is seen not as a burden‚Äîbut as a fundamental part of open science.\nüì¢ Explore More:\nAccess our Resource Sheet, which contains numerous valuable resources shared by the panellists, facilitators, and participants.\nView the session recording on YouTube.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúTesting Research Code‚Äù will take place on February 20, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 4, a resources sheet with tips and the session recording on YouTube is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2025-02-18_jb_eostrc_s1_e4/banner_episode_4.png",
    "last_modified": "2025-06-13T14:37:50+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2025-02-18_jb_eostrc_s1_e3/",
    "title": "Enabling Open Science through Research Code: Insights from Episode 3 - Opening up Research Code",
    "description": "This is a blog sharing insights from Episode 3 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Anelda van der Walt, Jyoti Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2025-02-18",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Online",
      "Remote"
    ],
    "contents": "\nThis blog was originally posted on RSE Asia Blog page.\nEpisode 3 bannerIn December 2024, we hosted episode four of our six-part series on Enabling Opening Science through Research Code. This time, we focused on openly sharing research code. The conversation provided invaluable insights into best practices, challenges, and the impact of open source in research. Whether you are a researcher, software developer, or just getting started, here are the key takeaways from this inspiring discussion.\nWhy Open Research Code Matters\nResearch software plays a crucial role in scientific discovery. Making it openly accessible enhances transparency, reproducibility, and collaboration. The discussion highlighted several reasons why open code can be beneficial to those who develop it as well as the broader research community:\nReproducibility & Credibility: When researchers share their code, others can validate and build upon it, ensuring scientific integrity.\nCollaboration & Community Growth: Open software enables researchers and developers worldwide to work together, improving tools and methodologies.\nIncreased Citations & Impact: Studies with accessible code tend to receive more citations, increasing the visibility and influence of the research.\nFunding & Institutional Support: Many funding agencies now require researchers to share code and data as part of open science initiatives.\nChallenges and How to Overcome Them\nWhile making code open has clear benefits, it comes with its own set of challenges. Speakers shared personal experiences and solutions to common obstacles:\nFear of Criticism: Many researchers worry that sharing their code may invite scrutiny. However, constructive feedback leads to improved code quality.\nMaintaining Code Over Time: Researchers often move on to new projects and cannot maintain old code. One solution is to create a community around a project, inviting contributors to help maintain and improve it.\nData Privacy & Intellectual Property: Researchers must anonymise datasets or create synthetic versions that simulate actual data while maintaining confidentiality when dealing with sensitive data.\nDocumentation & Reusability: A well-documented project is far more valuable to others. Providing README files, usage instructions, and licensing information makes it easier for others to use and contribute.\nWe talk more about documentation in Episode 4!\n\nBest Practices for Sharing Research Code\nTo make code truly open and useful, researchers can consider the following best practices:\nUse Version Control Platforms: Platforms like GitHub, GitLab, and Bitbucket facilitate collaboration, version tracking, and code sharing.\nChoose an Appropriate License: Open source licenses like MIT, Apache 2.0, and GPL define how others can use and modify the code.\nProvide Clear Documentation: A README file explaining installation, usage, dependencies, and citation details makes the code accessible to others.\nInclude Citation Information: Using a CITATION.cff file ensures that researchers get credit for their work when their code is used in publications.\nUse Containerisation for Reproducibility: Tools like Docker and GitHub Code Spaces help ensure that code runs the same way on different machines.\nLeverage Community Support: Engaging with communities like Research Software Engineering (RSE) groups, The Carpentries, and others provides learning opportunities and networking.\nDiverse Perspectives on Open Science\nThe discussion brought together speakers from various backgrounds, including bioinformatics, linguistics, software engineering, and illustration. Their stories emphasised that open science is not just for software developers but also for researchers and creatives working in different fields.\nAdeyinka Oresanya, a software developer at CHAOSS in Nigeria\nChioma Onyido, a bioinformatician from Nigeria, shared how Bioconductor, an open-source project for bioinformatics, has been instrumental in her work.\nMars Lee, a technical illustrator, highlighted the importance of visual documentation to make open source more accessible.\nKate Huddlestone, a linguist at Stellenbosch University in South Africa, shared how open-source tools enabled her to work with sign language data, significantly advancing her research.\nJuan Pablo, a senior program manager at GitHub, discussed how GitHub provides tools like citation files and ORCID integration to make research software more discoverable and citable.\nFinal Advice for Researchers Interested in Open Code\nEach speaker shared a key piece of advice for those looking to engage in open research software:\nJoin a Community: Engaging with open-source and research communities provides learning and collaboration opportunities.\nTake Small Steps: Even minimal documentation, a simple README, or choosing a license makes a big difference.\nLeverage Available Resources: Many educational institutions provide free access to GitHub tools and training programs.\nDon‚Äôt Fear Making Mistakes: Sharing imperfect code is better than keeping it inaccessible. The community will help improve it.\nConclusion\nOpening research code benefits both individual researchers and the broader scientific community. By embracing best practices and leveraging community support, researchers can enhance collaboration, improve research reproducibility, and increase the impact of their work. Whether you are just starting or looking to improve your open science practices, remember that engagement, documentation, and a willingness to share and learn are the keys to success.\nThe first draft of this blog post was created with ChatGPT from the edited video transcript.\nLooking Ahead\nThe next episode in the series, ‚ÄúDocumentation for Research Code‚Äù will take place on January 23, 2025, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 3, a resources sheet with tips and the session recording is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n\n\n\n",
    "preview": "blog/2025-02-18_jb_eostrc_s1_e3/banner_episode_3.png",
    "last_modified": "2025-06-13T14:36:12+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2024-11-30_jb_eostrc_s1_e2/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 2 - Enabling Reproducibility through Research Code",
    "description": "This is a blog sharing insights from Episode 2 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Jyoti Bhogal, Mireille Grobbelaar, Anelda van der Walt, Saranjeet Kaur Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2024-11-30",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Online",
      "Remote"
    ],
    "contents": "\nThis blog was originally posted on RSE Asia Blog page.\nEpisode 2 bannerThis blog was originally hosted on the RSSE Africa webpage\nThe ‚ÄòEnabling Open Science Through Research Code‚Äô meet-up series, co-hosted by RSSE Africa and RSE Asia, continues to build momentum. Episode 2, titled ‚ÄúEnabling Reproducibility Through Research Code,‚Äù took place on November 14, 2024, bringing together a diverse group of participants and experts to discuss a cornerstone of open science‚Äîreproducibility. A valuable open educational resource related to this topic, which the meetup was based on, is available from CodeRefinery.\nReproduciblility through research codeThe Turing Way Community. This illustration is created by Scriberia with The Turing Way community, used under a CC-BY 4.0 licence. DOI: 10.5281/zenodo.3332807\nConnecting Researchers Who Code\nA key goal of this series is to connect researchers who code, especially those in Asia and Africa, with peers worldwide to foster collaboration and support. As Anelda van der Walt (RSSE Africa) explained:\n‚ÄúThere are so many researchers who code, but they‚Äôre often isolated and don‚Äôt have communities to share tools, best practices, or even just to vent about the challenges. We hope this series can be the starting point for those conversations.‚Äù\nWe welcomed participants from various disciplines, including health-related fields, law, linguistics, and bioinformatics. The audience represented a mix of coding-heavy researchers (spending over 50% of their day coding), less frequent coders, and those just beginning their coding journey.\nMeet the Panel\nEpisode 2 featured a diverse panel of experts who brought their unique perspectives on enabling reproducibility:\nKozo Nishida: Project Researcher, Tokyo University of Agriculture and Technology, Japan\nPeter van Heusden: Bioinformatician, South African National Bioinformatics Institute/University of the Western Cape, South Africa\nRadovan Bast: Research Software Engineer, UiT The Arctic University of Norway, and managing the CodeRefinery project.\nPanel Discussion: Tips for Enabling Reproducibility\nReproducibility, in its simplest terms, is about ensuring that research findings can be replicated and validated. Without reproducibility, there‚Äôs no way to confirm the reliability of scientific results.\nSaranjeet Kaur Bhogal, one of the session facilitators from RSE Asia, captured this sentiment perfectly when she said:\n‚ÄúBe your own best collaborator.‚Äù\nThis idea resonated with all the panellists, who emphasised the importance of documenting workflows and code in a way that‚Äôs accessible and understandable‚Äînot just for others, but for your future self.\nRadovan Bast added to this perspective, explaining:\n‚ÄúThe person you will collaborate with most within your academic career is your past and future self. We should be kind to our future selves!‚Äù\nWhether six months or years down the line, thorough documentation and explanation of your work ensures you‚Äîor anyone else‚Äîcan reproduce the results.\nKozo Nishida shared a practical example from metabolomics research, underlining the challenges of reproducibility in quantifying mass spectrometry data. He explained that creating annotations for mass spec peaks often requires manual tweaks and detailed adjustments. Without thorough documentation and clear steps, reproducing metabolomics quantifications becomes nearly impossible.\nPeter van Heusden reflected on his experiences entering the field of pathogen bioinformatics. He noted that many research papers described methodologies but often omitted critical details, highlighting the importance of reproducibility. He emphasised:\n‚ÄúIf it‚Äôs not in code, it‚Äôs not really reproducible.‚Äù\nFor Peter, reproducibility means translating what has been done manually into code, ensuring that workflows are transparent and repeatable.\nRadovan Bast pointed out that reproducibility encompasses many elements‚Äîdata, scripts, dependencies, environments, workflows, and more. He acknowledged that achieving perfect reproducibility can be daunting and advised:\n‚ÄúDon‚Äôt let perfect be the enemy of good enough.‚Äù\nRadovan reminded the audience that reproducibility doesn‚Äôt need to be flawless to be valuable. He emphasised the importance of sharing work in a reusable way to avoid reinventing the wheel or wasting time.\nPractical Tips for Ensuring Reproducibility\nThe session provided many actionable tips to help researchers make their work more reproducible. These included advice on file types, documentation tools, and simple practices like running code on a different computer to ensure it works across environments.\nAs with all sessions in the series, a comprehensive resource sheet summarising these tips is available here.\nThe Importance of Community in Reproducibility\nThe panel stressed how reproducibility benefits not just individual researchers but entire research communities:\nRadovan Bast stressed that limited time and resources make it essential to ‚Äústand on the shoulders of others‚Äù by building on existing tools and workflows rather than starting from scratch every time. However, he cautioned that when using others‚Äô code, researchers should always check the license to ensure they have permission to use it and later share their changes.\nPeter van Heusden highlighted the importance of structured approaches. Starting projects with standardised templates not only ensures consistency but also makes it easier to reproduce and reuse workflows.\nKozo Nishida added that reproducible code enables others to build upon your work, improving entire fields of research. He emphasised the importance of joining communities to share tools, collaborate, and foster reproducibility collectively.\nLicensing and Assisted Coding\nWhen using code found online, it‚Äôs crucial to respect the provided license and credit the author.\nAssisted coding with AI, however, raises unresolved questions about licensing and authorship. The panel noted that clearer guidelines from legal experts are needed as this area continues to evolve. It will be interesting to see how these tools and spaces adapt to address these challenges.\nLooking Ahead\nThe next episode in the series, ‚ÄúOpening Up Your Code,‚Äù will take place on December 12, 2024, at 08:30 UTC. Be sure to register here and join the conversation!\nFor those who missed Episode 2, a resources sheet with tips and the session recording is available. This series is an excellent opportunity to learn, connect, and grow as we work together to enable open science - one line of code at a time.\nThis meetup series is a collaboration between Talarify, RSSE Africa, RSE Asia, AREN, and ReSA.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n\n\n\n",
    "preview": "blog/2024-11-30_jb_eostrc_s1_e2/banner_episode_2.png",
    "last_modified": "2025-06-13T14:35:40+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2024-10-31_jb_eostrc_ep_1/",
    "title": "Enabling Open Science Through Research Code: Insights from Episode 1 - Conversations with Researchers Who Code",
    "description": "This is a blog sharing insights from Episode 1 of the Community Conversation series 'Enabling Open Science Through Research Code'.",
    "author": [
      {
        "name": "Jyoti Bhogal, Mireille Grobbelaar, Anelda van der Walt, Saranjeet Kaur Bhogal",
        "url": "https://github.com/jyoti-bhogal"
      }
    ],
    "date": "2024-10-29",
    "categories": [
      "Research Software Engineering",
      "Open Science",
      "Coding",
      "Community Building",
      "Experience Blog",
      "Online",
      "Remote"
    ],
    "contents": "\nThis blog was originally posted on RSE Asia Blog page.\nEpisode 1 bannerOn October 10, 2024, the first episode of the ‚ÄòEnabling Open Science Through Research Code‚Äô community conversation took place. The topic for the first episode was ‚ÄòConversations with Researchers Who Code‚Äô focusing on the pivotal role of research software in enabling open science. The event was hosted by RSSE Africa and the RSE Asia Association. It aimed to bring together researchers from various disciplines to share their experiences of coding, collaboration, and the challenges they face as they navigate the world of open science. This episode was a part of the celebration for International Research Software Engineer (RSE) Day, bringing attention to the growing importance of RSEs in research.\nSession Overview\nThe session kicked off with facilitators Anelda van der Walt and Saranjeet Kaur welcoming participants and introducing the co-facilitators Jyoti Bhogal and Mireille Grobbelaar. This diverse team set the stage for a lively discussion with four distinguished speakers: Dr.¬†Biandri Joubert, Dr.¬†Gaurav Bhalerao, Mahmoud Abdelrazek, and Prasad Sutar. The session had around 30 participants from all across the world.\nIntroductions & Open Science Insights\nAfter a warm welcome, the conversation shifted to the core topic: open science and the importance of research software and systems as described in the UNESCO Open Science Recommendations. The facilitators invited the speakers to share their academic backgrounds, work experiences, and current roles, giving the audience a sense of the various pathways that lead them into the world of research software coding.\nSome of the key questions posed to the speakers included:\nWhat did you study, and where?\nDo you have postgraduate qualifications?\nWhat is your current role, and how does coding feature in your work?\nThis introduction provided a backdrop to understand how the speakers‚Äô careers evolved, and how their coding skills were developed to support their research or that of others at the organisation where they work.\nPanel Discussion: The Life of a Researcher Who Codes\nThe heart of the session was a panel discussion where the speakers delved deeper into the realities of research coding. Some highlights from the discussion include:\nDr.¬†Gaurav Bhalerao explained how coding forms an integral part of his day-to-day activities, particularly in structuring large datasets for neuroscience research. He also shared the challenges of balancing coding with research responsibilities.\nMahmoud Abdelrazek talked about his work in geospatial analysis and how his team collaborates on coding projects. He highlighted the collaborative nature of his work, where coding is not only a personal skill but also a shared responsibility within his research group.\nDr.¬†Biandri Joubert touched on the challenges of being the sole programmer in her group and how she overcomes the feeling of isolation by participating in coding communities and seeking support from platforms like the Carpentries.\nPrasad Sutar discussed his experience with developing software that is used by others and the importance of ensuring that his coding practices align with both the research objectives and software quality standards.\nThe panel also explored whether all researchers should learn to code. They agreed that even if a researcher doesn‚Äôt need to code regularly, learning basic coding concepts is valuable. This foundational knowledge enables researchers to read and understand code at a high level, helping them grasp the algorithms or logic applied to address specific problem statements. A valuable analogy, comparing coding to medical training was suggested during the meetup. Just as it‚Äôs beneficial for everyone to learn basic first-aid, it‚Äôs useful for researchers to grasp fundamental coding concepts. Some may advance to become paramedics, equivalent to those using coding more regularly, while a few specialize deeply - similar to neurosurgeons or expert programmers. What are your thoughts? Should coding become a core skill for all researchers, or is it more practical to foster collaboration with coding specialists when needed?\nThe panel also explored topics like the amount of time spent coding, the collaborative nature of research software projects, and the availability of support and training for researchers.\nLearning and Community Support\nAn essential part of the discussion revolved around the resources and communities that help researchers improve their coding skills. Dr.¬†Gaurav Bhalerao recommended resources such as Carpentries lessons and online coding tutorials like p5.js for those starting out. The speakers emphasized the importance of continuous learning and staying connected with the global community through platforms like RLadies, Quarto, and others. To know about more resources please see the section Resources and Links.\nQ&A and Wrap-Up\nThe session concluded with a Q&A where participants posed questions about the pain points of learning to code, transitioning into a coding role from other fields, and how to stay updated with coding trends while maintaining research quality. One insightful comment came from Dr.¬†Biandri Joubert, who emphasized that code that runs doesn‚Äôt always mean it‚Äôs correct, highlighting the critical need for combining coding skills with sound statistical knowledge.\nThe facilitators wrapped up the event by sharing resources from partners, including RSSE Africa, RSE Asia, AREN, and ReSA, all of which provide platforms for collaboration, learning, and advocacy for the Research Software Engineering community.\nResources and Links\nTo access the wealth of resources shared in the session, visit our collection at Zenodo.\nFor those who missed this enlightening conversation, a recording of Episode 1 is available on the RSSE Africa website. Please remember to register for Episode 2 of the series. The conversation continues, highlighting the essential role of research software engineering in advancing open science globally.\nLearn More About Us\nFor more information and to join upcoming events, visit:\nRSSE Africa\nWebsite: https://rsse.africa\nSign up for our newsletter: https://talarify.us14.list-manage.com/subscribe?u=35d5db26d3b108b9ef9b9ac43&id=55e9f5a692\nJoin our LinkedIn group, where you can also share information with the broader community: https://www.linkedin.com/groups/12903402/\nRSE Asia\nWebsite: https://rse-asia.github.io/RSE_Asia/\nFor the latest news, events, activities, and opportunities, follow us on our LinkedIn page (https://www.linkedin.com/company/rse-asia-association/)\nTo join the RSE Asia community, please fill out our short Community Membership Form (https://docs.google.com/forms/d/1XSxDaTJzcNyGeDYXyJNVg1TDCo7un18PLFNiK6\\_jL2g/edit)\nAREN\nWebsite: https://africanrn.org/\nSign up: https://docs.google.com/forms/d/e/1FAIpQLSeeFkD5A4D9l6ncQWjKBiI-GqBOzL-JMe7Fx3ijUYEjHjDUoQ/viewform\nReSA\nWebsite: https://www.researchsoft.org/\nSign up for the newsletter: https://www.researchsoft.org/news/\nThe Amsterdam Declaration on Funding Research Software Sustainability\nBecome a signatory: https://adore.software/sign/\n\n",
    "preview": "blog/2024-10-31_jb_eostrc_ep_1/Ep_1_banner.png",
    "last_modified": "2025-06-13T14:35:10+05:30",
    "input_file": {},
    "preview_width": 2000,
    "preview_height": 1600
  },
  {
    "path": "blog/2024-10-26_pycon_india_2024/",
    "title": "Insights from My Experience at PyCon India 2024",
    "description": "Insights from the four-day annual Python conference.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2024-10-26",
    "categories": [
      "Python",
      "Conference",
      "Talk",
      "Open Science",
      "Lightning Talk",
      "Accessibility",
      "Open Source",
      "Bengaluru",
      "India",
      "In Person"
    ],
    "contents": "\nJyoti Bhogal with the PyCon India 2024 BannerOverview\nThe PyCon India 2024 conference, held from September 20-23 at the NIMHANS Convention Center in Bengaluru, brought together a vibrant mix of sessions designed for learning, engagement, and networking. I experienced a diverse lineup, including keynotes, technical talks, hands-on workshops, lightning talks, poster sessions, and open forums (birds of feather (BoF) sessions). Sponsor stalls added to the excitement, and the open spaces allowed for spontaneous interactions, adding to the conference‚Äôs lively atmosphere. Celebrating its 15th anniversary this year, PyCon India 2024 marked my second time attending, following my first experience at PyCon India 2023 in Hyderabad.\nLightning Talks\nI had the opportunity to present a Lightning Talk titled ‚ÄúAccelerating India‚Äôs Open Science Journey with Python.‚Äù In my session, I introduced the audience to the concept of open science, highlighting its importance for India, exploring its four foundational pillars, and demonstrating how Python plays a vital role in advancing open science efforts. The talk was well-received, and you can view the slides on Zenodo.\nMy Lightning TalkClick below to view video:\n\n\nKeynotes\nThe conference featured four insightful keynotes:\nKovid Goyal presented ‚ÄúMaking Python Programs Fast,‚Äù where he shared in-depth techniques to optimize Python performance using C language.\nUsha Rengaraju spoke on ‚ÄúAI for Autism,‚Äù shedding light on neurodiversity and the potential of AI in autism research.\nMars Bar Lee explored ‚ÄúHow Open-Source Opened My Opportunities,‚Äù highlighting how contributions to open-source projects can extend beyond code, such as her technical illustrations for NumPy.\nJames Powell delivered a creative talk, ‚ÄúHow Many Oranges?‚Äù\nEach keynote brought valuable perspectives, and Mars Bar Lee‚Äôs emphasis on non-code contributions was particularly interesting. I got to meet Mars in-person, after having met online previously for a workshop on importance of alt text with images for improving digital accessibility.\nL-R: Mars, Unicorn, me, and NumPy comicsWorkshops\nThe first day had 3-hour workshops going on in three tracks. I attended two immersive workshops:\nChat with Tables: Developing Q&A system on Tabular data using Code Generative LLMs by Abhijeet Kumar\nAbhijeet conducted a workshop about Generative AI powered by Large Language Models (LLMs) that are revolutionizing text, image, and video generation, as well as coding through enterprise solutions like GitHub Copilot, Google‚Äôs Gemini Code Assist, IBM‚Äôs Watsonx, and Amazon‚Äôs Q Developer. Abhijeet‚Äôs workshop focused on leveraging code-generating LLMs to enable non-technical users to generate Python code by using natural language queries, bridging the gap for business users who lack programming skills but need quick data insights. This solution is valuable for business users who often require ad-hoc analysis of tabular data but rely heavily on data teams. Abhijeet demonstrated a workflow to query tabular data, generate insights from CSVs, and enhance natural language querying (NLQ) through techniques like few-shot prompting, pruning, and validation. Additionally, the session included setting up a streamlined process for building Q&A systems for tabular data and creating a Streamlit app, making data insights more accessible to non-technical analysts.\nFrom Zero to Backend Hero: Creating Full-Featured Apps with FastAPI by Vivek Keshore\nVivek started by interacting with the audience to gather basic information like what an API is, the different types of APIs, and the various types of calls. Vivek discussed the benefits of using FastAPI. He went on to discuss database design. Vivek discussed about implementation of Pydantic models and the development of user management APIs.\nPyLadies Luncheon\nThe PyLadies Luncheon was a personal highlight during the conference. Women attendees gathered to share their experiences, openly discussing the challenges they face related to diversity and inclusivity in their workplaces and how they‚Äôve overcome these obstacles over time. Hearing these stories and learning about the resilience and strategies of others was truly inspiring and energizing for me.\nSponsor Stalls\nThe conference featured several sponsor stalls, and one that stood out to me was the National Payments Corporation of India (NPCI), an umbrella organization for retail payments and settlement systems in India. I was intrigued to learn how their payments ecosystem is entirely open-source, with data storage managed on-premises instead of on Cloud platforms. Additionally, they introduced me to UPI payments that can be made via phone call or SMS, allowing transactions without an internet connection.\nDevSprints\nThe DevSprint was a one-day event featuring around 20 different projects. The day began with core contributors providing an overview of their respective projects, allowing participants to choose any project they were interested in contributing to. Among the various projects, I found myself particularly drawn to Django and NumPy.\nI opted to join the NumPy DevSprint, facilitated by technical illustrator Mars Bar Lee and NumPy core contributor Sebastian Berg. They introduced all the contributors to the NumPy project, outlining various ways to engage with the community through community calls, mailing lists, and comics, as well as how to contribute effectively. If you‚Äôre interested in contributing to NumPy, you can refer to the Contributing Guidelines for more information.\nI had the opportunity to attend an open session led by Saptak S., where participants discussed the nuances of digital accessibility, particularly in website development. The discussion covered essential points such as ensuring adequate contrast between text and background colors, structuring headings (H1, H2, H3, etc.) correctly, and guidelines for including appropriate details in the alt text for images. I discovered several valuable online resources to check and test webpage accessibility, including:\nA11y Project: A checklist for assessing accessibility levels.\naxe DevTools: A tool that evaluates whether a website complies with accessibility guidelines, available as an extension for Chrome, Firefox, and MS Edge browsers.\nWAVE: A tool that highlights areas of a website that are well or poorly designed regarding accessibility. WAVE also offers extensions for Chrome, Firefox, and MS Edge browsers.\nThe Button Cheat Sheet: A resource to determine if buttons on a website‚Äôs UI are designed effectively.\nThe WebAIM Million: The 2024 report on the accessibility of the top 1,000,000 home pages.\nWe discussed key considerations for developers when creating digitally accessible web pages. For instance, keyboard navigation is crucial for individuals with visual impairments or otherwise while working with a document by using only the keyboard, necessitating a logical heading structure (e.g., H1 followed by H2, and so on). It‚Äôs important to avoid jumping from say, H1 to H4, as this can confuse users.\nIn terms of coding practices, developers should specify the document language by adding the ‚Äòlang‚Äô attribute. This helps indicate which programming language is being used for different sections of the website. Additionally, tools like JAWS provide voice assistance to help developers ensure accessibility standards are met.\nDuring Continuous Integration (CI), it‚Äôs essential for developers to incorporate these accessibility guidelines into their workflows.\nSaptak also recommended several excellent learning resources, such as Adrian Roselli‚Äôs articles on accessibility issues, conference talks from experts in digital accessibility, and a helpful site for determining whether to use a carousel post: Should I Use a Carousel?\nConclusion\nThe PyCon India 2024 concluded with the DevSprints, marking an incredibly immersive learning experience for me. The Closing Ceremony featured two beat-box artists who entertained us, adding a refreshing twist to the event. I also had the pleasure of meeting Tanvi Agarwal, a digital illustrator who provides live transcription of talks, which I found truly inspiring. A big thank you to the entire PyCon India volunteer organizing team for once again delivering a fantastic conference!\nGet In Touch:\nEmail: bhogaljyoti1@gmail.comLinkedIn: http://www.linkedin.com/in/jyoti-bhogalGitHub: https://github.com/jyoti-bhogalWebsite: https://jyoti-bhogal.github.io/about-me/index.html\n\n\n\n",
    "preview": "blog/2024-10-26_pycon_india_2024/cover_image_Jyoti_conf_banner.jpg",
    "last_modified": "2025-06-13T14:34:21+05:30",
    "input_file": {}
  },
  {
    "path": "blog/PuneFOSS_2.0/",
    "title": "PuneFOSS 2.0: A Dive into Open Source Insights and Initiatives",
    "description": "In February 2024, I got the opportunity to participate in FOSS United's one day conference PuneFOSS 2.0. With this blog, the reader will come to know about FOSS in general, the talks at the conference, and my views.",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2024-03-08",
    "categories": [
      "Open Source",
      "Community Building",
      "FOSS",
      "FOSS United",
      "Open Science",
      "Experience Blog"
    ],
    "contents": "\nOpen SourceIntroduction\nRecently, I had the privilege of attending PuneFOSS 2.0, a one-day conference hosted by the FOSS United community at College of Engineering Pune, India on 24th Feb 2024. The conference had an impressive lineup of speakers, including industry experts like Vishal Arya, Rahul Kulkarni, Rohaan Goswami, Faeka Ansari, Mohammed Ali Chherwalla, Pranay Narang, Praveen Kumar, and Siddharth Jha, culminating in a thought-provoking panel discussion. This blog highlights some key insights shared during the event.\nWhat is FOSS?\nFOSS, an acronym for Free and Open Source Software, embodies a software development philosophy centered on freedom and openness. The term ‚ÄòFree‚Äô denotes users‚Äô liberty to run, alter, and share the software, while ‚ÄòOpen Source‚Äô signifies that the software‚Äôs source code is available for users to inspect, modify, and contribute to its progress. FOSS promotes collaboration, transparency, user empowerment, and frequently leads to the creation of more secure and sustainable software projects. Notable instances include Linux, Blender, Chromium, Kubernetes, and Mozilla Firefox.\nWhy FOSS?\nFOSS provides users with the liberty to utilize, adapt, and share software based on their preferences. This empowerment extends to both individuals and organizations, granting them control over their tools. The accessibility of the source code enables users to examine the inner workings of the software. FOSS promotes a collaborative model in software development, with a global community of diverse developers contributing to the creation of stronger, more secure, and innovative software. Users retain the freedom to tailor FOSS to meet their specific needs.\nQuote from Mohammed Ali Chherawalla‚Äôs talk on ‚ÄòBuilding an Open Source Culture in Companies‚Äô during PuneFOSS 2.0 on 24th Feb 2024, describing that Open source is not just about making code publicOpen Source in Government\nRahul Kulkarni shared his experiences through his talk on ‚ÄòHow open source encounters shaped my career‚Äô. He highlighted that one should choose open source or enterprise solutions based on the problem to be solved. I particularly liked the insights he gave about the necessity of using open source solutions for building digital platforms to be used by the Government of a country for large scale initiatives which require reaching out to each and every citizen. For example, the digital systems of government issued identity cards in India for various purposes like the AADHAAR UIDAI system. The rationale for the same being that this approach reduces the vendor buy-in, and independence from the roadmaps & timelines of the Enterprise software companies. He explained the importance of Data Empowerment and Protection Architecture (DEPA), which is a secure consent-based data sharing framework to accelerate financial inclusion. Rahul highly recommeded the book ‚ÄòThe Cathedral and the Bazaar‚Äô by Eric S. Raymond, in which the author explores the contrasting approaches of closed, centralized development (the cathedral) and open, decentralized collaboration (the bazaar) in the world of software development.\nRoadmap to Contribute to Open Source content and community\nIn an impressive talk on ‚ÄòNoobernetes assembly! Sneak Peek into one of the largest Open Source project‚Äô, Faeka Ansari provided a comprehensive walkthrough on starting a journey into open source contribution in Kubernetes and growing on the pathway. Drawing from her own experiences, she detailed the contribution pathway and shared valuable insights gained from working with the global Kubernetes community.\nFOSS for Social Impact\nRohaan Goswami shared his lived experiences around entrepreneurship focusing on the topic ‚ÄòHuman Centered Technology: Field Notes & Stories of Social Innovation using FOSS in 10+ countries‚Äô. Rohaan spoke about the human-centric approach taken towards health tech by his organization YCenter in Africa and India. He also shared the lessons he learnt from working on global projects as diverse as using AI to help Governments make better policy decisions in Africa, developing patient-centric innovations in HPV prevention & cancer care in Southeast Asian countries and creating agritech innovations to support farmers.\nPanel Discussion Highlights\nThe panel discussion delved into critical questions, such as the interpretation of ‚ÄòFree‚Äô - whether in terms of usage or freedom of development. Panelists, including Rahul, Rohaan, Nikhil, and Chakshu, provided diverse perspectives. Nikhil emphasized the government‚Äôs reliance on open source for large-scale projects, while Chakshu highlighted the importance of open source documentation as a valuable learning resource.\nAddressing Disparity in Github Accounts vs Contributors\nOne significant challenge discussed was the vast difference between the number of Github accounts and active contributors in India. The panel suggested initiatives like Code4GovtTech as a countrywide Indian alternative to the global GSoC, and highlighted the role of Consent Manager in India, encouraging attendees to explore its documentation for further insights.\nPicture of Jyoti Bhogal, the author of this blog, standing next to the Conference Poster at the PuneFOSS 2.0 eventConclusion\nPuneFOSS 2.0 was a melting pot of ideas, experiences, and discussions surrounding the open source community.The event not only showcased the diversity of expertise but also addressed pertinent issues, fostering a collaborative spirit in the pursuit of advancing open source initiatives in India. Check out this page to know more details of event or watch the livestream here.\nI had a day full of intriguing discussions with the speakers regsarding problem solving and creating impact in daily life of the user being at the core of any project, and the tools being secondary. The event reinforced my belief in the power of community!\nWhat are your thoughts and experiences around the open source philosophy? Leave them in the comments or write back to me at bhogaljyoti1@gmail.com; I am happy to read and reply!\n\n\n\n",
    "preview": "blog/PuneFOSS_2.0/open_source_label.jpg",
    "last_modified": "2024-10-30T13:05:22+05:30",
    "input_file": {}
  },
  {
    "path": "blog/pale_blue_dot_sdg_climate_action/",
    "title": "How Can Data Visualisation Help in Achieving Climate Action Sustainable Development Goal?",
    "description": "Data Insights for Sustainable Development Goals",
    "author": [
      {
        "name": "Jyoti Bhogal",
        "url": "https://jyoti-bhogal.github.io/about-me/"
      }
    ],
    "date": "2023-12-09",
    "categories": [
      "Data visualisation",
      "R",
      "Open Science",
      "Open Data",
      "Earth Observation Data",
      "NASA",
      "Geospatial",
      "Maps",
      "Sustainable Development Goal",
      "Climate Action"
    ],
    "contents": "\n\n\n\nIntroduction\nTo foster a sustainable lifestyle globally, the United Nations has established the Sustainable Development Goals (SDGs), a comprehensive framework consisting of 17 targets set to be achieved by 2030. Each goal is accompanied by specific indicators crucial for determining progress and success.\nGoal 13: Climate Action\nWithin this framework, Goal 13: Climate Action emerges as a pivotal objective for urgently addressing climate change and its far-reaching impacts. Goal 13 is gauged through two vital indicators:\nThe number of countries reporting nationally determined contributions, long-term strategies, national adaptation plans, and adaptation communications to the United Nations Framework Convention on Climate Change secretariat.\nTotal greenhouse gas (GHG) emissions per year.\nFocus on Indicator 2\nThis blog post centers its analysis on Indicator 2, delving into the critical assessment of total GHG emissions per year.\nGreenhouse Gases Overview\nThe primary greenhouse gases (GHGs) encompass carbon dioxide (CO2), methane, nitrous oxide, ozone, chlorofluorocarbons, and water vapour. With CO2 constituting approximately 76% of total GHGs (Source: Inventory of U.S. Greenhouse Gas Emissions and Sinks 1990-2015, EPA, 2017), my analysis will hone in on the dynamics of carbon dioxide.\nData Source and Collection\nFor this analysis, I leveraged the NASA Earth Observation data, a publicly accessible resource catering to a diverse audience, including students, citizen scientists, researchers, academicians, and industries. Using Terminal commands, I downloaded 2616 data files. Each of these files represents a day from January 1, 2015, to February 28, 2022. These files store records of the Assimilated Dry-Air Column Average CO2 Daily Mean, indexed by latitude and longitude, and are formatted in a .netCDF file. The data download steps drew inspiration from a comprehensive Medium article by Haolin Xiong.\nData Analysis in RStudio\nWe used the 2616 .netCDF files, one file representing one day. Each file has the daily average value of CO2 stored in grid points formed by the 576 longitude and 361 latitude points. We extracted the data for CO2 present in the form of a matrix of dimension 576 rows and 361 columns. From this matrix, we computed the global average, global north average, and global south average value of CO2, for each day. Thus we created three different time series for these average values from 1 Jan 2015 to 28 Feb 2022. To go a step ahead, we also converted the CO2 gridded data into a raster object to create a world map.\nEssential R packages for this analysisHere‚Äôs a snippet of the codeData Plotting:\nTo create interactive time series plots in R, we used the ‚Äòdygraph‚Äô package. The interactive plot is such that, when the user points the cursor on the plot area, they can see the (x,y) coordinates, which are the date and average values from the three time series, respectively. The plot also has a time range selector at the bottom, using which the user can zoom in to see the time series values for a particular time period of interest. Besides, we used the raster object to look at the daily values of CO2 in each geographical region. Two such plots are given below. The working code is accessible from the Github repository jyoti-bhogal/data_visualisation.\nVisualising CO2 Changes\nThe resultant maps offer a vivid representation of the evolving values of the Assimilated Dry-Air Column Average CO2 Daily Mean. These visual cues paint a detailed picture of how CO2 emissions have dynamically evolved across diverse geographical regions. Please look closely at the numerical range in the index at the right of the graphs. Notice how the average value changes from ~390 ppm in 2015 to ~418 ppm in 2022.\n\n\nJan 2015: Average CO2 LevelsFeb 2022: Average CO2 LevelsGoal 13 and Future Targets\nThe Goal 13 of SDGs envisions a 43% reduction in GHG emissions by 2030 starting from 2010, culminating in net-zero emissions by 2050. The above graphs as well as sources reveal CO2 levels of approximately 390 ppm in 2010 and 419 ppm in 2023 (Source: Carbon Dioxide | Vital Signs ‚Äì Climate Change),i.e., a 7.5% increase as opposed to the 43% targeted decrease. Indicator 2, reflecting on total GHG emissions, seems to fall short of anticipated targets. Addressing this shortfall requires not only governmental policies but also individual contributions. Transitioning to green fuel vehicles, re-assessing agricultural practices like Stubble burning, increasing vegetation cover, and embracing recycling and reuse initiatives stand as actionable steps towards a sustainable future.\nSome Fun Insight: Seasonal Fluctuations\nDiving into the intricacies of annual CO2 fluctuations, we uncover the profound impact of seasonal cycles in photosynthesis. From the Northern Hemisphere spring, where plant growth absorbs CO2, to the autumn, marked by plant decomposition releasing CO2, a symphony of natural processes influences atmospheric CO2 levels. A parallel, albeit milder, pattern plays out in the Southern Hemisphere during opposing seasons.\n\n\n\n\n\n",
    "preview": "blog/pale_blue_dot_sdg_climate_action/banner_climate_action.jpg",
    "last_modified": "2025-04-14T23:50:02+05:30",
    "input_file": {}
  }
]
